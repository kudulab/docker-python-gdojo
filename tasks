#!/bin/bash

set -Eeuo pipefail

RELEASER_VERSION="2.1.2"
DOCKER_OPS_VERSION="2.0.0"
SECRET_OPS_VERSION="0.8.0"

SECRET_OPS_FILE="ops/secret-ops"
SECRET_OPS_TAR_FILE="ops/secret-ops-${SECRET_OPS_VERSION}.tar.gz"
RELEASER_FILE="ops/releaser-${RELEASER_VERSION}"
DOCKER_OPS_FILE="ops/docker-ops-${DOCKER_OPS_VERSION}"

VAULT_ADDR="https://vault.kudulab.io:8200"

mkdir -p ops
if [[ ! -f $RELEASER_FILE ]];then
  wget --quiet -O $RELEASER_FILE https://github.com/kudulab/releaser/releases/download/${RELEASER_VERSION}/releaser
fi
source $RELEASER_FILE
if [[ ! -f $DOCKER_OPS_FILE ]];then
  wget --quiet -O $DOCKER_OPS_FILE https://github.com/kudulab/docker-ops/releases/download/${DOCKER_OPS_VERSION}/docker-ops
fi
source $DOCKER_OPS_FILE
if [[ ! -f $SECRET_OPS_TAR_FILE ]];then
  wget --quiet -O $SECRET_OPS_TAR_FILE https://github.com/kudulab/secret-ops/releases/download/${SECRET_OPS_VERSION}/secret-ops.tar.gz
  tar -xf $SECRET_OPS_TAR_FILE -C ops
fi
source $SECRET_OPS_FILE

image_name="kudulab/python-gdojo"
image_registry="dockerhub"
image_dir="./image"
base_image_name="kudulab/python-dojo"
base_image_git_repo="git@github.com:kudulab/docker-python-dojo.git"

function docker_login {
  vault_user_path=$USER
  if [ $vault_user_path == "go" ]; then
    vault_user_path="gocd"
  fi
  dockerhub_user=$(vault read -field=user secret/$vault_user_path/dockerhub)
  vault read -field=password secret/$vault_user_path/dockerhub | docker login --username $dockerhub_user --password-stdin
}

function base_image_last_tag {
  if [ -n "${GO_DEPENDENCY_LABEL_BASE}" ]; then
    # This gets git tag of the base git repo,
    # based on GO_DEPENDENCY_LABEL_BASE, which contains
    # the git commit ref of the base git repo. This means that
    # the git tag of base docker image depends on the gocd pipeline dependency.
    git_tag=$(git ls-remote -t ${base_image_git_repo} | grep "${GO_DEPENDENCY_LABEL_BASE}" | awk -F "/" '{print $3}')
  else
    git_tag="latest"
  fi
  echo "${git_tag}"
}

function base_image_last_tag {
  git ls-remote --tags git@github.com:kudulab/docker-python-dojo.git | sort -t '/' -k 3 -V | awk '{print $2}' | cut -d'/' -f3 | tail -1
}

function build_local {
  prefix="$1"
  base_img_version="$(base_image_last_tag)"
  base_img=${base_image_name}:${prefix}-${base_img_version}
  this_imagerc_filename="imagerc.${prefix}-gdojo"

  if [[ ! -f "${image_dir}/pycharm.tar.gz" ]]; then
    echo "Downloading Pycharm"
    wget --quiet --show-progress -O "${image_dir}/pycharm.tar.gz" https://download.jetbrains.com/python/pycharm-community-2019.1.3.tar.gz
    echo "Successfully downloaded Pycharm"
  else
    echo "Pycharm already downloaded, not redownloading"
  fi

  image_tag="${prefix}-$(git rev-parse HEAD)"
  sed "s'{{BASE_IMAGE}}'${base_img}'g" $image_dir/Dockerfile.tmpl > $image_dir/Dockerfile.${prefix}
  docker_build_options="-f Dockerfile.${prefix}"
  image_tag=$(git rev-parse HEAD)
  docker_ops::docker_build "${image_dir}" "${this_imagerc_filename}" "${image_name}" "${prefix}-${image_tag}" "${image_registry}"
}

function itest {
  prefix=$1
  set -e
  docker_ops::source_imagerc "${image_dir}" "imagerc.${prefix}-gdojo"
  echo "Testing image: ${KUDU_DOCKER_IMAGE_URL}"
  echo "DOJO_DOCKER_IMAGE=\"${KUDU_DOCKER_IMAGE_URL}\"" > ./Dojofile.to_be_tested
  echo "DOJO_IDENTITY_OUTER=\"$(pwd)/test/integration/identities/full\"" >> ./Dojofile.to_be_tested
  echo "DOJO_WORK_OUTER=$(pwd)/test/integration/end_user/test_dojo_work" >> ./Dojofile.to_be_tested
  time bats "$(pwd)/test/integration/end_user/bats"
}

function publish {
  prefix=$1
  base_image_tag=$(base_image_last_tag)
  this_repo_version=$(releaser::get_last_version_from_whole_changelog "${changelog_file}")
  production_image_tag="$prefix-${this_repo_version}_${base_image_tag}"
  docker_ops::ensure_pulled_image "${image_dir}" "imagerc.${prefix}-gdojo"
  docker_ops::retag_push "${image_dir}" "imagerc.${prefix}-gdojo" "${image_name}" "${production_image_tag}" "${image_registry}"
}


command="$1"
set +u
case "${command}" in
  set_version)
      releaser::bump_changelog_version "$2" "$3"
      ;;
  verify_version)
      releaser::conditional_verify
      ;;
  build_local_py2)
      build_local "py2"
      ;;
  build_local_py3)
      build_local "py3"
      ;;
  build)
      rm -rf "${image_dir}/pycharm.tar.gz"
      docker_login
      ./tasks build_local_py2
      docker_ops::push "${image_dir}" "imagerc.py2-gdojo"
      ./tasks build_local_py3
      docker_ops::push "${image_dir}" "imagerc.py3-gdojo"
      ;;
  itest)
      ./tasks itest_py2
      ./tasks itest_py3
      exit $?
      ;;
  itest_py2)
      itest "py2"
      exit $?
      ;;
  itest_py3)
      itest "py3"
      exit $?
      ;;
  example)
      docker_ops::ensure_pulled_image "${image_dir}"  "imagerc.py3-gdojo"
      echo "Testing image: ${KUDU_DOCKER_IMAGE_URL}"
      echo "DOJO_DOCKER_IMAGE=\"${KUDU_DOCKER_IMAGE_URL}\"" > ./Dojofile.example
      echo "DOJO_IDENTITY_OUTER=\"$(pwd)/test/integration/identities/full\"" >> ./Dojofile.example
      echo "DOJO_WORK_OUTER=$(pwd)/test/integration/end_user/test_dojo_work" >> ./Dojofile.example
      dojo -c ./Dojofile.example
      ;;
  release)
      ./tasks verify_version
      releaser::conditional_release
      ;;
  publish)
      docker_login
      publish "py2"
      publish "py3"
      ;;
  generate_vault_token)
      vault_token=$(vault token create -orphan -ttl=168h -policy=gocd -field token -metadata gocd_renew=true)
      secured_token_gocd=$(secret_ops::encrypt_with_gocd_top "${vault_token}")
      echo "Generated token: ${vault_token} and encrypted by GoCD server"
      secret_ops::insert_vault_token_gocd_yaml "${secured_token_gocd}"
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
